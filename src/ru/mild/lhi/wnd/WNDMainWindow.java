/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
* Author : Ruan Barros 
* Date : ?/04/2016
 */
package ru.mild.lhi.wnd;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import ru.mild.lhi.bean.Graph;
import ru.mild.lhi.bean.Spectrum;
import ru.mild.lhi.bean.Vertex;

/**
 *
 * @author dmitry
 */
public class WNDMainWindow extends javax.swing.JFrame {

    /**
     * Creates new form WNDMainWIndow
     */
    private Spectrum pathSpectrum = null;
    private JTextArea text;
    private int scale = 100;
    private File lastImage = null;
    private Queue<Vertex> builder = null;
    private Vertex lastBuilt = null;
    private int pass = 0;
    private boolean processing = false;
    private int timer = 100;

    public static final String MAIN_TITLE = "Mild :: LabyHinth Improved alpha v0.9";

    public WNDMainWindow() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        pathSpectrum = new Spectrum();
        jLbProcess.setVisible(false);

        for (Graph.ALGORITHM_TYPE type : Graph.ALGORITHM_TYPE.getTypes()) {
            jComboBox1.addItem(type);
        }

        try {
            setIconImage(ImageIO.read(getClass().getResourceAsStream("/ru/mild/lhi/gfx/labyhinth.png")));
        } catch (IOException ex) {
            Logger.getLogger(WNDMainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        setTitle(MAIN_TITLE);

        this.setLocationRelativeTo(null);
        jPanel1.requestFocus();
        jPanel1.grabFocus();
    }

    private void changeScale(int newScale) {
        if (pathSpectrum.getImageSource() != null && newScale >= 1 && newScale <= 600) {
            scale = newScale;
            jTperc.setText(scale + "%");
            int width = (pathSpectrum.getImageSource().getWidth() * newScale) / 100;
            int height = (pathSpectrum.getImageSource().getHeight() * newScale) / 100;
            jLbImage.setIcon(new ImageIcon(pathSpectrum.getImageSource().getScaledInstance(width, height, 0)));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLbImage = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jBroam = new javax.swing.JButton();
        jBselect = new javax.swing.JButton();
        jBspectrum = new javax.swing.JButton();
        jBexport = new javax.swing.JButton();
        jBrestart = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton6 = new javax.swing.JButton();
        jBedit = new javax.swing.JButton();
        jBpath = new javax.swing.JToggleButton();
        jBstop = new javax.swing.JButton();
        jBskip = new javax.swing.JButton();
        jLbProcess = new javax.swing.JLabel();
        jLbPlus = new javax.swing.JLabel();
        jTperc = new javax.swing.JLabel();
        jLbMinus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jPanel1.setBackground(new java.awt.Color(102, 0, 0));
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jPanel1KeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jPanel1KeyReleased(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLbImage.setBackground(new java.awt.Color(51, 0, 0));
        jLbImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLbImage.setOpaque(true);
        jLbImage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jLbImageFocusGained(evt);
            }
        });
        jLbImage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jLbImageKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jLbImage);

        jPanel2.setBackground(new java.awt.Color(255, 102, 102));

        jBroam.setBackground(new java.awt.Color(51, 0, 0));
        jBroam.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBroam.setForeground(new java.awt.Color(255, 255, 255));
        jBroam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/man-sprinting.png"))); // NOI18N
        jBroam.setText("Roam (SHIFT)");
        jBroam.setToolTipText("Roam in map using the selected Algorithm");
        jBroam.setBorder(null);
        jBroam.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBroam.setEnabled(false);
        jBroam.setFocusPainted(false);
        jBroam.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jBroam.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jBroamMouseMoved(evt);
            }
        });
        jBroam.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jBroamMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBroamMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBroamMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jBroamMouseEntered(evt);
            }
        });
        jBroam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBroamActionPerformed(evt);
            }
        });

        jBselect.setBackground(new java.awt.Color(51, 0, 0));
        jBselect.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBselect.setForeground(new java.awt.Color(255, 255, 255));
        jBselect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/select-list.png"))); // NOI18N
        jBselect.setText("Open (SPACE)");
        jBselect.setToolTipText("Open a map in Maps folder");
        jBselect.setBorder(null);
        jBselect.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBselect.setFocusPainted(false);
        jBselect.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jBselect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBselectActionPerformed(evt);
            }
        });

        jBspectrum.setBackground(new java.awt.Color(51, 0, 0));
        jBspectrum.setForeground(new java.awt.Color(255, 255, 255));
        jBspectrum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/square-target-interface-symbol.png"))); // NOI18N
        jBspectrum.setText("Spectrum (F2)");
        jBspectrum.setToolTipText("Shows the spectrum of current map");
        jBspectrum.setBorder(null);
        jBspectrum.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBspectrum.setEnabled(false);
        jBspectrum.setFocusPainted(false);
        jBspectrum.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jBspectrum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBspectrumActionPerformed(evt);
            }
        });

        jBexport.setBackground(new java.awt.Color(51, 0, 0));
        jBexport.setForeground(new java.awt.Color(255, 255, 255));
        jBexport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/scale-symbol.png"))); // NOI18N
        jBexport.setText("Export Roam (F3)");
        jBexport.setToolTipText("Export the current Roam data");
        jBexport.setBorder(null);
        jBexport.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBexport.setEnabled(false);
        jBexport.setFocusPainted(false);
        jBexport.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jBexport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBexportActionPerformed(evt);
            }
        });

        jBrestart.setBackground(new java.awt.Color(51, 0, 0));
        jBrestart.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBrestart.setForeground(new java.awt.Color(255, 255, 255));
        jBrestart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/refresh.png"))); // NOI18N
        jBrestart.setText("Reload (BS)");
        jBrestart.setToolTipText("Reload roaming");
        jBrestart.setBorder(null);
        jBrestart.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBrestart.setEnabled(false);
        jBrestart.setFocusPainted(false);
        jBrestart.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jBrestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBrestartActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(102, 0, 0));
        jComboBox1.setFocusable(false);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(51, 0, 0));
        jButton6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/cogwheel.png"))); // NOI18N
        jButton6.setToolTipText("Build a new Map");
        jButton6.setBorder(null);
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton6.setFocusPainted(false);
        jButton6.setPreferredSize(new java.awt.Dimension(40, 40));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jBedit.setBackground(new java.awt.Color(51, 0, 0));
        jBedit.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBedit.setForeground(new java.awt.Color(255, 255, 255));
        jBedit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/pencil.png"))); // NOI18N
        jBedit.setToolTipText("Edit this current map");
        jBedit.setBorder(null);
        jBedit.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBedit.setEnabled(false);
        jBedit.setFocusPainted(false);
        jBedit.setPreferredSize(new java.awt.Dimension(40, 40));
        jBedit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jBeditMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBeditMouseClicked(evt);
            }
        });
        jBedit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBeditActionPerformed(evt);
            }
        });

        jBpath.setBackground(new java.awt.Color(51, 0, 0));
        jBpath.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/vertex.png"))); // NOI18N
        jBpath.setSelected(true);
        jBpath.setToolTipText("Build it with way");
        jBpath.setBorderPainted(false);
        jBpath.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBpath.setFocusable(false);
        jBpath.setRequestFocusEnabled(false);
        jBpath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBpathActionPerformed(evt);
            }
        });

        jBstop.setBackground(new java.awt.Color(51, 0, 0));
        jBstop.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBstop.setForeground(new java.awt.Color(255, 255, 255));
        jBstop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/play.png"))); // NOI18N
        jBstop.setToolTipText("Roam in map using the selected Algorithm");
        jBstop.setBorder(null);
        jBstop.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBstop.setEnabled(false);
        jBstop.setFocusPainted(false);
        jBstop.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jBstop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBstopActionPerformed(evt);
            }
        });

        jBskip.setBackground(new java.awt.Color(51, 0, 0));
        jBskip.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jBskip.setForeground(new java.awt.Color(255, 255, 255));
        jBskip.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/skipe.png"))); // NOI18N
        jBskip.setToolTipText("Roam in map using the selected Algorithm");
        jBskip.setBorder(null);
        jBskip.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jBskip.setEnabled(false);
        jBskip.setFocusPainted(false);
        jBskip.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jBskip.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jBskipMouseMoved(evt);
            }
        });
        jBskip.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jBskipMouseExited(evt);
            }
        });
        jBskip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBskipActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBselect, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBedit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBroam, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBpath, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBstop, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBskip, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBrestart, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBspectrum, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBexport, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1)
                    .addComponent(jBroam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBselect, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBexport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBspectrum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jBpath)
                            .addComponent(jBedit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jBrestart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBstop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jBskip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLbProcess.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLbProcess.setForeground(new java.awt.Color(255, 255, 255));
        jLbProcess.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLbProcess.setText("Processando...");

        jLbPlus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/zoomIn.png"))); // NOI18N
        jLbPlus.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLbPlus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLbPlusMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLbPlusMouseClicked(evt);
            }
        });

        jTperc.setBackground(new java.awt.Color(51, 51, 51));
        jTperc.setForeground(new java.awt.Color(255, 255, 255));
        jTperc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jTperc.setText("100 %");
        jTperc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTperc.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTperc.setOpaque(true);
        jTperc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTpercMouseClicked(evt);
            }
        });

        jLbMinus.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/zoomOut.png"))); // NOI18N
        jLbMinus.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jLbMinus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLbMinusMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLbMinusMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLbProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 943, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLbMinus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTperc, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLbPlus)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLbProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTperc, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLbMinus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLbPlus, javax.swing.GroupLayout.Alignment.LEADING)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBspectrumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBspectrumActionPerformed
        text = new JTextArea(pathSpectrum.printMatrix());
        text.setEditable(false);
        text.setFont(new Font("Monospaced", Font.PLAIN, 12));
        JOptionPane.showMessageDialog(null, new JScrollPane(text), "Spectrum of Path", JOptionPane.INFORMATION_MESSAGE);
        System.gc();
    }//GEN-LAST:event_jBspectrumActionPerformed

    private void jBselectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBselectActionPerformed
        new WNDSelect(this).setVisible(true);
        jLbImage.validate();
        jLbImage.repaint();
        System.gc();
    }//GEN-LAST:event_jBselectActionPerformed

    public void buildNrun(File imageFile) {
        if (imageFile != null) {
            lastImage = imageFile;
            try {
                BufferedImage it = ImageIO.read(imageFile);
                pathSpectrum.build(it);
                jLbImage.setIcon(new ImageIcon(it));
                changeScale(100);
                jBroam.setEnabled(true);
                jBedit.setEnabled(true);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error opening image!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
        jBexport.setEnabled(false);
        jBspectrum.setEnabled(false);
        jBrestart.setEnabled(false);
    }

    private void jBroamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBroamActionPerformed

        boolean isControlDown = evt.getModifiers() == 18;

        pass = 0;

        try {
            long tempoMsInicial = System.currentTimeMillis();
            Map<Vertex, Vertex> mapPath = null;

            Graph.ALGORITHM_TYPE type = (Graph.ALGORITHM_TYPE) jComboBox1.getSelectedItem();

            if (!type.isSingleRaster()) {
                // genetic and other stuff
                Thread a = new Thread(() -> {
                    jLbProcess.setText("Running a heavy algorithm, please wait...");
                    this.repaint();
                });
                a.start();
                a.join();

                mapPath = pathSpectrum.runRoam(type);
            } else {

                if (!isControlDown) {
                    mapPath = pathSpectrum.runSearch(type);
                } else {
                    builder = pathSpectrum.runSilentSearch(type);
                }
            }
            long tempoFinal = System.currentTimeMillis();
            jLbProcess.setVisible(true);

            if (!isControlDown) {

                jBskip.setEnabled(false);
                jBstop.setEnabled(false);

                jLbImage.setIcon(new ImageIcon(pathSpectrum.paintedPath(mapPath, jBpath.isSelected())));

            } else if (builder != null ? builder.size() > 0 : false) {
                jBskip.setEnabled(true);
                jBstop.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(null, "Impossible to find a way!", "Path error", JOptionPane.ERROR_MESSAGE);
                jBrestart.doClick();
            }
            if (!isControlDown) {
                jLbProcess.setText("The " + jComboBox1.getSelectedItem().toString() + " algorithm performed in " + (tempoFinal - tempoMsInicial) + "ms using " + pathSpectrum.getPathCount() + " paths");
            } else {
                jLbProcess.setText("The " + jComboBox1.getSelectedItem().toString() + " algorithm performed in " + (tempoFinal - tempoMsInicial) + "ms and entered halt mode");
            }
            jBroam.setEnabled(false);
            jBspectrum.setEnabled(true);
            jBrestart.setEnabled(true);

            if (!isControlDown) {
                jBexport.setEnabled(true);
            }

            jBedit.setEnabled(false);
            changeScale(scale);
        } catch (Exception ex) {
            ex.printStackTrace();
            jLbProcess.setVisible(true);
            jLbProcess.setText("Error : " + ex.getMessage());
        }
        jLbProcess.setIcon(null);
        jBroam.setText("Roam (SHIFT)");
        System.gc();
    }//GEN-LAST:event_jBroamActionPerformed

    private void jBexportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBexportActionPerformed
        try {

            String a = JOptionPane.showInputDialog("Export as : ", lastImage.getName().replace(".png", ""));

            BufferedImage image = new BufferedImage(pathSpectrum.getImageSource().getWidth(), pathSpectrum.getImageSource().getHeight(), BufferedImage.TYPE_INT_ARGB);

            Graphics toPaint = image.getGraphics();

            toPaint.drawImage(pathSpectrum.getImageSource(), 0, 0, null);

            toPaint.setColor(new Color(0, 0, 0, 160));

            toPaint.fillRect(0, 0, image.getWidth(), 30);

            toPaint.setColor(Color.GREEN);

            toPaint.drawString("LabyHinth Alpha v0.7 - " + lastImage.getName().replace(".png", ""), 0, 25);
            toPaint.drawString(jLbProcess.getText(), 0, 12);

            if (a != null ? !a.isEmpty() : false) {
                ImageIO.write(image, "png", new File(a + "_" + jComboBox1.getSelectedItem().toString() + ".png"));

            }

        } catch (IOException ex) {
            Logger.getLogger(WNDMainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBexportActionPerformed

    private void jBroamMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBroamMouseClicked
        changeScale(scale);
    }//GEN-LAST:event_jBroamMouseClicked

    private void jLbMinusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLbMinusMouseClicked
        if (evt.isControlDown()) {
            changeScale(scale - 100);
        } else {
            changeScale(scale - 10);
        }
    }//GEN-LAST:event_jLbMinusMouseClicked

    private void jLbPlusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLbPlusMouseClicked
        if (evt.isControlDown()) {
            changeScale(scale + 100);
        } else {
            changeScale(scale + 10);
        }
    }//GEN-LAST:event_jLbPlusMouseClicked

    private void jTpercMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTpercMouseClicked
        changeScale(100);
    }//GEN-LAST:event_jTpercMouseClicked

    private void jLbMinusMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLbMinusMouseReleased

    }//GEN-LAST:event_jLbMinusMouseReleased

    private void jLbPlusMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLbPlusMouseReleased

    }//GEN-LAST:event_jLbPlusMouseReleased

    private void jBrestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrestartActionPerformed
        try {
            BufferedImage img = ImageIO.read(lastImage);
            pathSpectrum.build(img);
            jLbImage.setIcon(new ImageIcon(img));
            jBrestart.setEnabled(false);
            jBspectrum.setEnabled(false);
            jBexport.setEnabled(false);
            jBedit.setEnabled(true);
            jBroam.setEnabled(true);
            jBskip.setEnabled(false);
            jBstop.setEnabled(false);
            changeScale(100);
        } catch (IOException ex) {
            Logger.getLogger(WNDMainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jBrestartActionPerformed

    private void jBroamMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBroamMousePressed
        if (jBroam.isEnabled()) {
            new Thread(() -> {
                jLbProcess.setIcon(new ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/clock.png")));
                jLbProcess.setVisible(true);

                jLbProcess.setText("Processing...");
                jBroam.setText("Roaming...");
            }).start();
        }

    }//GEN-LAST:event_jBroamMousePressed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        new WNDEngine(this).setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jBeditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBeditActionPerformed

        if (pathSpectrum.getCellHeight() == pathSpectrum.getCellHeight() && pathSpectrum.getMatrixX() == pathSpectrum.getMatrixY()) {
            new WNDBuild(this, pathSpectrum, lastImage).setVisible(true);
            jLbProcess.setText("");
        } else {
            JOptionPane.showMessageDialog(null, "Sorry, but this editor doesn't support non NxN matrix");
        }

    }//GEN-LAST:event_jBeditActionPerformed

    private void jPanel1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyReleased
        switch (evt.getKeyCode()) {
            case KeyEvent.VK_SHIFT:
                jBroam.doClick();
                break;
            case KeyEvent.VK_BACK_SPACE:
                jBrestart.doClick();
                break;
            case KeyEvent.VK_F2:
                jBspectrum.doClick();
                break;
            case KeyEvent.VK_F3:
                jBexport.doClick();
                break;
            case KeyEvent.VK_SUBTRACT:
                if (evt.isControlDown()) {
                    changeScale(scale - 100);
                } else {
                    changeScale(scale - 10);
                }
                break;
            case KeyEvent.VK_ADD:
                if (evt.isControlDown()) {
                    changeScale(scale + 100);
                } else {
                    changeScale(scale + 10);
                }
                break;
            case KeyEvent.VK_SPACE:
                jBselect.doClick();
                break;
            case KeyEvent.VK_DOWN:
                jScrollPane1.getVerticalScrollBar().setValue(jScrollPane1.getVerticalScrollBar().getValue() + 10);
                break;
            case KeyEvent.VK_UP:
                jScrollPane1.getVerticalScrollBar().setValue(jScrollPane1.getVerticalScrollBar().getValue() - 10);
                break;
            case KeyEvent.VK_LEFT:
                jScrollPane1.getHorizontalScrollBar().setValue(jScrollPane1.getHorizontalScrollBar().getValue() - 10);
                break;
            case KeyEvent.VK_RIGHT:
                jScrollPane1.getHorizontalScrollBar().setValue(jScrollPane1.getHorizontalScrollBar().getValue() + 10);
                break;
        }
    }//GEN-LAST:event_jPanel1KeyReleased

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        jPanel1.requestFocus();
        jPanel1.grabFocus();
    }//GEN-LAST:event_formWindowGainedFocus

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        jPanel1.requestFocus();
        jPanel1.grabFocus();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jBpathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBpathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBpathActionPerformed

    private void jLbImageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLbImageKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLbImageKeyPressed

    private void jPanel1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1KeyTyped

    private void jBeditMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBeditMousePressed
        new Thread(() -> {
            jLbProcess.setVisible(true);
            jLbProcess.setText("Processing and opening Map Editor...");
        }).start();
    }//GEN-LAST:event_jBeditMousePressed

    private void jBeditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBeditMouseClicked

    }//GEN-LAST:event_jBeditMouseClicked

    private void jLbImageFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jLbImageFocusGained
        jPanel1.requestFocus();
        jPanel1.grabFocus();
    }//GEN-LAST:event_jLbImageFocusGained

    private void jBroamMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBroamMouseEntered

    }//GEN-LAST:event_jBroamMouseEntered

    private void jBroamMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBroamMouseExited
        jBroam.setIcon(new ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/man-sprinting.png")));
    }//GEN-LAST:event_jBroamMouseExited

    private void jBroamMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBroamMouseMoved
        if (evt.isControlDown()) {
            jBroam.setIcon(new ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/man-sprinting_pass.png")));
        } else {
            jBroam.setIcon(new ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/man-sprinting.png")));
        }
    }//GEN-LAST:event_jBroamMouseMoved

    private void jBstopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBstopActionPerformed
        jBstop.setEnabled(false);
        jBskip.setEnabled(false);
        jBrestart.doClick();
    }//GEN-LAST:event_jBstopActionPerformed

    private void jBskipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBskipActionPerformed
        boolean isControlDown = evt.getModifiers() == 18;

        if (!processing) {

            if (!isControlDown) {
                timer = 10000;
                processing = true;
                new Thread(() -> {
                    while (!builder.isEmpty() && jBstop.isEnabled()) {
                        skip();
                        try {
                            Thread.sleep(1, timer);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(WNDMainWindow.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                    skip();
                    processing = false;
                }).start();

            } else {
                skip();
            }

        } else {
            timer = timer < 100 ? 50 : timer / 2;
        }

    }//GEN-LAST:event_jBskipActionPerformed

    private void jBskipMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBskipMouseMoved
        if (evt.isControlDown()) {
            jBskip.setIcon(new ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/go.png")));
        } else {
            jBskip.setIcon(new ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/skipe.png")));
        }
    }//GEN-LAST:event_jBskipMouseMoved

    private void jBskipMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBskipMouseExited
        jBskip.setIcon(new ImageIcon(getClass().getResource("/ru/mild/lhi/gfx/skipe.png")));
    }//GEN-LAST:event_jBskipMouseExited

    private void skip() {
        if (builder != null ? builder.size() > 0 : false) {
            lastBuilt = builder.poll();
            pathSpectrum.paintVertex(lastBuilt, jLbImage, true);
            jLbProcess.setText(jComboBox1.getSelectedItem().toString() + " pass " + (++pass) + " in " + timer + " ns");
        } else {
            int choose = JOptionPane.showConfirmDialog(null, "End found! \n\nDo you want to solve the map?", "Warning", JOptionPane.INFORMATION_MESSAGE);

            if (choose == JOptionPane.YES_OPTION) {
                jBrestart.doClick();
                jBroam.doClick();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(() -> {
            new WNDMainWindow().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBedit;
    private javax.swing.JButton jBexport;
    private javax.swing.JToggleButton jBpath;
    private javax.swing.JButton jBrestart;
    private javax.swing.JButton jBroam;
    private javax.swing.JButton jBselect;
    private javax.swing.JButton jBskip;
    private javax.swing.JButton jBspectrum;
    private javax.swing.JButton jBstop;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox<Graph.ALGORITHM_TYPE> jComboBox1;
    private javax.swing.JLabel jLbImage;
    private javax.swing.JLabel jLbMinus;
    private javax.swing.JLabel jLbPlus;
    private javax.swing.JLabel jLbProcess;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jTperc;
    // End of variables declaration//GEN-END:variables

}
